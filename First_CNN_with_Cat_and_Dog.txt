# Importing all necessary libraries 
from keras.preprocessing.image import ImageDataGenerator 
from keras.models import Sequential 
from keras.layers import Conv2D, MaxPooling2D 
from keras.layers import Activation, Dropout, Flatten, Dense 
from keras import backend as K 

train_data_dir = 'C:/DL_coding/cat_and_dog_dataset/train'
validation_data_dir = 'C:/DL_coding/cat_and_dog_dataset/test'
nb_train_samples =200 
nb_validation_samples = 200
epochs = 5
batch_size = 32




#dimensions of our images.
img_width, img_height = 150, 150



if K.image_data_format() == 'channels_first':
    input_shape = (3, img_width, img_height)
else:
    input_shape = (img_width, img_height, 3)





model = Sequential() 
model.add(Conv2D(32, (2, 2), input_shape=input_shape)) 
model.add(Activation('relu')) 
model.add(MaxPooling2D(pool_size=(2, 2))) 

model.add(Conv2D(32, (2, 2))) 
model.add(Activation('relu')) 
model.add(MaxPooling2D(pool_size=(2, 2))) 

model.add(Conv2D(64, (2, 2))) 
model.add(Activation('relu')) 
model.add(MaxPooling2D(pool_size=(2, 2))) 

model.add(Flatten()) 
model.add(Dense(64)) 
model.add(Activation('relu')) 
model.add(Dropout(0.5)) 
model.add(Dense(1)) 
model.add(Activation('sigmoid')) 




model.summary()


model.compile(loss='binary_crossentropy', 
			optimizer='rmsprop', 
			metrics=['accuracy']) 




train_datagen = ImageDataGenerator( 
	rescale=1. / 255, 
	shear_range=0.2, 
	zoom_range=0.2, 
	horizontal_flip=True) 

test_datagen = ImageDataGenerator(rescale=1. / 255) 

train_generator = train_datagen.flow_from_directory( 
	train_data_dir, 
	target_size=(img_width, img_height), 
	batch_size=batch_size, 
	class_mode='binary') 

validation_generator = test_datagen.flow_from_directory( 
	validation_data_dir, 
	target_size=(img_width, img_height), 
	batch_size=batch_size, 
	class_mode='binary') 

history=model.fit_generator( 
	train_generator, 
	steps_per_epoch=nb_train_samples // batch_size, 
	epochs=epochs, 
	validation_data=validation_generator, 
	validation_steps=nb_validation_samples // batch_size) 




 import matplotlib.pyplot as plt
    # Fit the model
 
# list all data in history
print(history.history.keys())
# summarize history for accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()




model.save_weights('model_saved.h5') 



model.load_weights("model_saved.h5")



from matplotlib import pyplot as plt



 from keras.models import load_model

import cv2

import numpy as np

img = cv2.imread('C:/DL_coding/cat_and_dog_dataset/train/dog/1000.jpg')

 
'''plt.imshow(img)
plt.title("David")
plt.show()'''

img1 = cv2.resize(img,(150,150))

img2 = np.reshape(img1,[1,150,150,3])

img_class = model.predict_classes(img2)

prediction = img_class[0]
classname = img_class[0]


print("Class: ",classname)

if classname == 0:

        from matplotlib import pyplot as plt  
        plt.imshow(img1)
        plt.title("This is cat")
        plt.show()
elif classname == 1:
        from matplotlib import pyplot as plt  
        plt.imshow(img1)
        plt.title("This is dog")
        plt.show()

print ("\n \n Good is Good")



